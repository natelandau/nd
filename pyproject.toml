# https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# https://python-poetry.org/docs/pyproject/
[tool.poetry]
name = "nd"
version = "0.1.0"
description = "A highly personalized CLI wrapper for Nomad"
authors = ["Nate Landau <github@natenate.org>"]
readme = "README.md"
repository = "https://github.com/natelandau/nd"

# https://commitizen-tools.github.io/commitizen/config/
[tool.commitizen]
bump_message = "bump(release): v$current_version â†’ v$new_version"
tag_format = "v$version"
update_changelog_on_bump = true
version = "0.1.0"
version_files = ["pyproject.toml:version"]

# https://python-poetry.org/docs/pyproject/#scripts
[tool.poetry.scripts]
nd = "nd.cli:app"

# https://python-poetry.org/docs/dependency-specification/
[tool.poetry.dependencies]
arrow = "^1.2.2"
loguru = "^0.6.0"
plumbum = "^1.7.2"
python = "^3.10"
requests = "^2.28.1"
rich = "^12.5.1"
tomli = "^2.0.1"
typer = { extras = ["all"], version = "^0.6.1" }
validators = "^0.20.0"

# https://python-poetry.org/docs/master/managing-dependencies/
# TODO: Split in `tool.poetry.group.dev` and `tool.poetry.group.test` when Poetry 1.2.0 is released.
[tool.poetry.dev-dependencies]
absolufy-imports = "*"
bandit = { extras = ["toml"], version = "*" }
black = "*"
commitizen = "*"
coverage = { extras = ["toml"], version = "*" }
cruft = "^2.11.0"
darglint = "*"
flake8 = "*"
flake8-bugbear = "*"
flake8-builtins = "*"
flake8-comprehensions = "*"
flake8-docstrings = "*"
flake8-eradicate = "*"
flake8-mutable = "*"
flake8-noqa = "*"
flake8-pytest-style = "*"
flake8-return = "*"
flake8-rst-docstrings = "*"
flake8-simplify = "*"
flake8-tidy-imports = "*"
isort = "*"
mypy = "*"
pdoc = "*"
pep8-naming = "*"
poethepoet = "*"
pre-commit = "*"
pydocstyle = { extras = ["toml"], version = "*" }
PySnooper = "*"
pytest = "^7.1.2"
pytest-clarity = "*"
pytest-mock = "^3.8.1"
pytest-xdist = "^2.5.0"
pyupgrade = "^2.34.0"
requests-mock = "^1.9.3"
safety = "*"
shellcheck-py = "*"
tryceratops = "^1.1.0"
typeguard = "^2.13.3"
types-requests = "^2.28.8"
vulture = "*"
yesqa = "*"

# https://bandit.readthedocs.io/en/latest/config.html
[tool.bandit]
skips = ["B101", "B404", "B607"]

# https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
[tool.black]
line-length = 100

# https://coverage.readthedocs.io/en/latest/config.html#report
[tool.coverage.report]
fail_under = 50
precision = 1
show_missing = true
skip_covered = true
exclude_lines = [
    'pragma: no cover',
    'def __repr__',
    'raise typer\.Exit',
    'except [\w\s\._]+ as .*:',
    'log\.trace',
    'log\.debug',
    'log\.success',
    'log\.info',
    'log\.warning',
    'log\.error',
    'log\.critical',
    'log\.exception',
]

# https://coverage.readthedocs.io/en/latest/config.html#run
[tool.coverage.run]
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["src"]

# https://coverage.readthedocs.io/en/latest/config.html#xml
[tool.coverage.xml]
output = "reports/coverage.xml"

# https://pycqa.github.io/isort/docs/configuration/options.html
[tool.isort]
color_output = true
line_length = 100
profile = "black"
src_paths = ["src", "tests"]

# https://mypy.readthedocs.io/en/latest/config_file.html
[tool.mypy]
disallow_any_unimported = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
disallow_untyped_defs = true
ignore_missing_imports = true
junit_xml = "reports/mypy.xml"
no_implicit_optional = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
exclude = [
    'tests/',  # TOML literal string (single-quotes, regex okay, no escaping necessary)
]

# http://www.pydocstyle.org/en/latest/usage.html#configuration-files
[tool.pydocstyle]
convention = "google"
add_ignore = ["D212","D107"]

# https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
[tool.pytest.ini_options]
addopts = "--color=yes --doctest-modules --exitfirst --failed-first --strict-config --strict-markers --verbosity=2 --junitxml=reports/pytest.xml"
filterwarnings = ["error", "ignore::DeprecationWarning"]
testpaths = ["src", "tests"]
xfail_strict = true

# https://pypi.org/project/vulture/
[tool.vulture]
# exclude = ["file*.py", "dir/"]
# ignore_decorators = ["@app.route", "@require_*"]
ignore_names = ["args", "kwargs", "request"]
# make_whitelist = true
min_confidence = 80
paths = ["src", "tests"]
sort_by_size = true
verbose = false

# https://github.com/nat-n/poethepoet
[tool.poe.tasks]

  [tool.poe.tasks.docs]
  help = "Generate this package's docs"
  cmd = """
    pdoc
      --docformat $docformat
      --output-directory $outputdirectory
      nd
    """

    [[tool.poe.tasks.docs.args]]
    help = "The docstring style (default: google)"
    name = "docformat"
    options = ["--docformat"]
    default = "google"

    [[tool.poe.tasks.docs.args]]
    help = "The output directory (default: docs)"
    name = "outputdirectory"
    options = ["--output-directory"]
    default = "docs"

  [tool.poe.tasks.lint]
  help = "Lint this package"

    [[tool.poe.tasks.lint.sequence]]
    shell = "vulture"

    [[tool.poe.tasks.lint.sequence]]
    cmd = """
      pre-commit run
        --all-files
        --color always
      """

    [[tool.poe.tasks.lint.sequence]]
    shell = "safety check --continue-on-error --full-report"

  [tool.poe.tasks.test]
  help = "Test this package"

    [[tool.poe.tasks.test.sequence]]
    cmd = "clear"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage xml"

  [tool.poe.tasks.clean]
  help = "Run isort and black"

    [[tool.poe.tasks.clean.sequence]]
    cmd = "isort src/ tests/"

    [[tool.poe.tasks.clean.sequence]]
    cmd = "black src/ tests/"
