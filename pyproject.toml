[build-system] # https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
    build-backend = "poetry.core.masonry.api"
    requires      = ["poetry-core>=1.0.0"]

[tool.poetry] # https://python-poetry.org/docs/pyproject/
    authors     = ["Nate Landau <github@natenate.org>"]
    description = "A highly personalized CLI wrapper for Nomad"
    name        = "nd"
    readme      = "README.md"
    repository  = "https://github.com/natelandau/nd"
    version     = "0.2.1"

    [tool.poetry.scripts] # https://python-poetry.org/docs/pyproject/#scripts
        nd = "nd.cli:app"

    [tool.poetry.dependencies] # https://python-poetry.org/docs/dependency-specification/
        arrow      = "^1.2.3"
        loguru     = "^0.6.0"
        plumbum    = "^1.8.0"
        python     = "^3.10"
        requests   = "^2.28.1"
        rich       = "^12.6.0"
        tomli      = "^2.0.1"
        typer      = { extras = ["all"], version = "^0.7.0" }
        validators = "^0.20.0"

    [tool.poetry.group.test.dependencies]
        pytest         = "^7.1.2"
        pytest-clarity = "^1.0.1"
        pytest-mock    = "^3.8.1"
        pytest-xdist   = "^2.5.0"
        requests-mock  = "^1.9.3"

    [tool.poetry.group.dev.dependencies]
        absolufy-imports      = "^0.3.1"
        bandit                = { extras = ["toml"], version = "^1.7.4" }
        black                 = "^22.10.0"
        commitizen            = "^2.37.0"
        coverage              = { extras = ["toml"], version = "^6.5.0" }
        darglint              = "^1.8.1"
        flake8                = "^5.0.4"
        flake8-bugbear        = "^22.10.27"
        flake8-builtins       = "^2.0.1"
        flake8-comprehensions = "^3.10.1"
        flake8-docstrings     = "^1.6.0"
        flake8-eradicate      = "^1.4.0"
        flake8-mutable        = "^1.2.0"
        flake8-noqa           = "^1.2.9"
        flake8-pytest-style   = "^1.6.0"
        flake8-return         = "^1.2.0"
        flake8-rst-docstrings = "^0.3.0"
        flake8-simplify       = "^0.19.3"
        flake8-tidy-imports   = "^4.8.0"
        isort                 = "^5.10.1"
        mypy                  = "^0.991"
        pdoc                  = "^12.3.0"
        pep8-naming           = "^0.13.2"
        poethepoet            = "^0.16.4"
        pre-commit            = "^2.20.0"
        pydocstyle            = { extras = ["toml"], version = "^6.1.1" }
        pysnooper             = "^1.1.1"
        pyupgrade             = "^3.2.2"
        shellcheck-py         = "^0.8.0.4"
        tryceratops           = "^1.1.0"
        typeguard             = "^2.13.3"
        types-requests        = "^2.28.8"
        vulture               = "^2.6"
        yamllint              = "^1.28.0"
        yesqa                 = "^1.4.0"

[tool.bandit] # https://bandit.readthedocs.io/en/latest/config.html
    skips = ["B101", "B404", "B607"]

[tool.black]
    line-length = 100

# https://commitizen-tools.github.io/commitizen/config/
[tool.commitizen]
    bump_message             = "bump(release): v$current_version â†’ v$new_version"
    tag_format               = "v$version"
    update_changelog_on_bump = true
    version                  = "0.2.1"
    version_files            = ["pyproject.toml:version"]

# https://coverage.readthedocs.io/en/latest/config.html#report
[tool.coverage.report]
    exclude_lines = [
        'def __repr__',
        'except [\w\s\._]+ as .*:',
        'log\.critical',
        'log\.debug',
        'log\.error',
        'log\.exception',
        'log\.info',
        'log\.success',
        'log\.trace',
        'log\.warning',
        'pragma: no cover',
        'raise Abort',
        'raise Exit',
        'raise typer\.Exit',
    ]
    fail_under = 50
    precision = 1
    show_missing = true
    skip_covered = true

[tool.coverage.run] # https://coverage.readthedocs.io/en/latest/config.html#run
    branch       = true
    command_line = "--module pytest"
    data_file    = "reports/.coverage"
    source       = ["src"]

[tool.coverage.xml] # https://coverage.readthedocs.io/en/latest/config.html#xml
    output = "reports/coverage.xml"

[tool.isort] # https://pycqa.github.io/isort/docs/configuration/options.html
    color_output = true
    line_length  = 100
    profile      = "black"
    src_paths    = ["src", "tests"]

[tool.mypy] # https://mypy.readthedocs.io/en/latest/config_file.html
    disallow_any_unimported     = true
    disallow_subclassing_any    = false
    disallow_untyped_decorators = false
    disallow_untyped_defs       = true
    exclude                     = ['tests/']
    ignore_missing_imports      = true
    junit_xml                   = "reports/mypy.xml"
    no_implicit_optional        = true
    pretty                      = true
    show_column_numbers         = true
    show_error_codes            = true
    show_error_context          = true
    warn_redundant_casts        = true
    warn_unreachable            = true
    warn_unused_ignores         = true

[tool.pydocstyle] # http://www.pydocstyle.org/en/latest/usage.html#configuration-files
    add_ignore = ["D107", "D212"]
    convention = "google"

[tool.pytest.ini_options] # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
    addopts        = "--color=yes --doctest-modules --exitfirst --failed-first --strict-config --strict-markers --verbosity=2 --junitxml=reports/pytest.xml"
    filterwarnings = ["error", "ignore::DeprecationWarning"]
    testpaths      = ["src", "tests"]
    xfail_strict   = true

[tool.vulture] # https://pypi.org/project/vulture/
    # exclude = ["file*.py", "dir/"]
    # ignore_decorators = ["@app.route", "@require_*"]
    ignore_names = ["args", "kwargs", "request", "version"]
    # make_whitelist = true
    min_confidence = 80
    paths          = ["src", "tests"]
    sort_by_size   = true
    verbose        = false

# https://github.com/nat-n/poethepoet
[tool.poe.tasks]

    [tool.poe.tasks.docs]
        cmd = """
    pdoc
      --docformat google
      --output-directory docs
      nd
    """
        help = "Generate this package's docs"

    [tool.poe.tasks.lint]
        help = "Lint this package"

        [[tool.poe.tasks.lint.sequence]]
            shell = "vulture src/ tests/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "flake8 src/ tests/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "isort --check-only --diff src/ tests/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "black --check src/ tests/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "poetry check"

        [[tool.poe.tasks.lint.sequence]]
            shell = "bandit --configfile pyproject.toml -r src/ tests/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "pydocstyle --config=pyproject.toml src/ tests/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "mypy --config-file pyproject.toml src/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "yamllint ."

[tool.poe.tasks.test]
    help = "Test this package"

    [[tool.poe.tasks.test.sequence]]
        cmd = "clear"

    [[tool.poe.tasks.test.sequence]]
        cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
        cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
        cmd = "coverage xml"

[tool.poe.tasks.clean]
    help = "Run isort and black"

    [[tool.poe.tasks.clean.sequence]]
        cmd = "isort src/ tests/"

    [[tool.poe.tasks.clean.sequence]]
        cmd = "black src/ tests/"
